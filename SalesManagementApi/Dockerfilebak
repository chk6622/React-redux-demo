#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build-env
WORKDIR /src

# Copy csproj and restore as distinct layers
# https://andrewlock.net/optimising-asp-net-core-apps-in-docker-avoiding-manually-copying-csproj-files-part-2/
#WORKDIR /src
COPY ["SalesManagementApi/SalesManagementApi.csproj", "SalesManagementApi/"]
RUN dotnet restore "SalesManagementApi/SalesManagementApi.csproj"
COPY . .
WORKDIR "/src/SalesManagementApi"
#COPY . .
#RUN for file in $(ls *.csproj); do mkdir -p ${file%.*}/ && mv $file ${file%.*}/; done
RUN dotnet build "SalesManagementApi.csproj" -c Release -o /app/build

## diff between netcore2.2 and netcore3.0
#WORKDIR /src/SalesManagementApi
#RUN dotnet restore "SalesManagementApi/SalesManagementApi.csproj"

# copy everything and build
COPY . .
RUN dotnet publish "SalesManagementApi.csproj" -c Release -o /app/publish

# build runtime image
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim

LABEL Maintainer="XingT"
WORKDIR /app
#COPY --from=build-env /src/SalesManagementApi/out .
COPY --from=publish /app/publish .
EXPOSE 80
ENTRYPOINT ["dotnet", "SalesManagementApi.dll"]